
# 改变login redirect URI, 因为现在是这样的：http://localhost:8000/accounts/profile/，我现在不想走这个uri
# 写了下面这一行，直接redirect到templates/food/index.html
LOGIN_REDIRECT_URL = 'food:index'



# login 和logout不同，
# 在urls.py中，写：
# 在 Django 中，类视图是一种处理请求和生成响应的方法，它们基于类而不是函数。
# 类视图提供了一种更加面向对象的方式来组织视图逻辑，并且可以利用类的继承和方法重写等特性来实现更加复杂的逻辑。
# 在给定的代码中，auth_views.LoginView 就是一个类视图，它负责处理用户登录的逻辑。通过调用 .as_view() 方法，
# 将这个类视图转换为可调用的视图，以便在 URL 配置中使用。
path('login/', auth_views.LoginView.as_view(template_name='user/login.html'), name='login'),

# 老师这个写法只能通过post请求进行logout，所以注释掉
# path('logout/', auth_views.LogoutView.as_view(template_name='user/logout.html'), name='logout'),

# 用这个
path('logout/', user_views.logout_view, name='logout'),

# 在user/views.py中：
def logout_view(request):
    logout(request)
    return render(request, 'user/logout.html')


在base.html中加了判断语句，用来查看登录用户是否已经登录。
如果登录，显示logout，如果没有登录，显示login
   {% if user.is_authenticated %}
                <a href="{% url 'logout' %}">Logout</a>
            {% else %}
                <a href="{% url 'login' %}">Login</a>
            {% endif %}



# 加这个@login_required 意思是：只有用户登录了，才能访问这个页面
# 所以django会先导航到login页面，等你输入密码后，下一个页面自动跳出来profile页面
@login_required
def profilepage(request):
    return render(request, 'user/profile.html')
但是记得要去Settings.py里加上：
LOGIN_URL = 'login'


# 2024-4-4
# 新增：
# 一：
新增了user/models.py中的UserProfile model，新增model后需要terminal输入下列指令来做数据migrate：
# python manage.py makemigrations
# python manage.py migrate
然后去user/admin.py注册这个model


# 二：
# 在settings.py中：
设置图片存储信息，profile page的图片上传后存到server的某个文件夹，而不是存到database，因为存储图片到database非常inefficient，在这里，server意思就是我们的computer
，执行本行代码后，在根目录中创建一个pictures文件夹，然后在这个pictures文件夹中生成这个profile_pics文件夹来存放上传的图片
MEDIA_ROOT = os.path.join(BASE_DIR, 'pictures')
# 如果我们想访问这些存储的图片，就按下面的url去访问
MEDIA_URL = '/pictures/'


# 三：
# 在user/profile.html中：
<img src="{{ user.userprofile.image.url }}" alt="">  这里写userprofile是因为models.py文件中我们自己写的model名字是UserProfile
所以这里不能有大写出现，否则无效。

# 图片不显示，因为图片在server中，为了让图片显示：
在foodMenu/urls.py中添加：
from django.conf import settings
from django.conf.urls.static import static

urlpatterns += [
                  # ... the rest of your URLconf goes here...
              ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


# 四：
设置用户default图片
-> 就网上下载到指定目录就好，名字要一致。这里就是user/models.py里的：
    image = models.ImageField(default='profile_pics/default.jpg', upload_to='profile_pics')


2024-5-5
新增：
# 一：
1.用django的signal dispatcher实现当用户注册时，系统发送信号来创建user profile:
当user/views.py中register函数中的form.save()执行时，就会触发signal。
signal接受者是谁？为了接收信号，需要在user文件夹下新建一个signals.py文件。
2.新建好user/signals.py后，去user/apps.py添加def ready()进行配置。
3.现在每个用户的profile当用户注册完成并登陆后，是自动创建的。不需要admin去手动创建用户profile了。

# 二：
class based views or generic views

# 三：
当某个user创建了某个item，然后另一个user登录时，另一个user可以知道是哪个user创建的这个item。
而我们知道：item是我们自己创建的model，包含食物的名字，价格，简介，图片等信息。user是django的内置model，那么怎么建立两者的联系呢？

解决方案：
将user作为一个variable，被item model引用。因为model是class啊！！！
也就是：把一个model作为另一个model的foreign key。
在food/models.py的Item model里，添加
    user_name = models.ForeignKey(User, on_delete=models.CASCADE, default=1)
不要忘记在terminal做migration迁移:
python manage.py makemigrations
python manage.py sqlmigrate food 000X根据提示的来
python manage.py migrate


# 四：
在food/models.py的Item model中，添加了下面的代码：
from django.urls import reverse
 def get_absolute_url(self):
        return reverse('item-detail', kwargs={'pk': self.pk})

因为我们希望：在基于类的视图的情况下，我们还需要希望user在创建item时重定向url。
这里想让用户在创建某个food item时，让django重定向到该项目的detail
